# ------------------------------------------------------------------------------ #
#
# Authors: Jake Dolan, Rory White (add your name here if you contributed to the class)
#
# Class:   EPaperDisplayDummy
#
# Purpose: This class handles the hardware interfacing of the EPaperDisplay.
#          You may use this class to draw and interact with the display screen.
#          For development reasons, this class represents a dummy screen made
#          with Tkinter. It contains the same functions and variables as the
#          MicroPython display class that runs on the microcontroller, but it
#          allows you to simulate what the screen will look like on your PC.
#
#          IMPORTANT: As the screen is representing the ePaper screen, it may
#          not use images. It can only use the following items: text, lines,
#          rectangles. It is only able to use the colours white, black and red.
#          Please DO NOT use anything other than these elements when editing
#          the UI as it will not translate to the ePaper display.
#
# ------------------------------------------------------------------------------ #
class EPaperDisplayDummy():
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("128x256 E-Ink Dummy Display")

        # Canvas dimensions
        self.canvas_width = SCREEN_WIDTH
        self.canvas_height = SCREEN_HEIGHT

        # Create canvas
        self.canvas = tk.Canvas(self.root, width=self.canvas_width, height=self.canvas_height, bg='white')
        self.canvas.pack()

    def run(self):
        self.root.mainloop()

    def draw_triangle(self):
        self.canvas.delete("triangle")
        side_length = min(self.canvas_width, self.canvas_height) - 40
        height = (math.sqrt(3) / 2) * side_length
        triangle_center_x, triangle_center_y = self.canvas_width // 2, self.canvas_height // 2

        triangle_vertices = [
            (triangle_center_x, triangle_center_y - height),
            (triangle_center_x - side_length // 2, triangle_center_y),
            (triangle_center_x + side_length // 2, triangle_center_y)
        ]

        self.canvas.create_polygon(*triangle_vertices[0], *triangle_vertices[1], *triangle_vertices[2], outline='red',
                                   fill='', width=7, tags="triangle")
        return tuple(sum(triangle_vertices, ()))

    def draw_warning(self):
        # Pass triangle coordinates
        triangle_coords = self.draw_triangle()

        # Calculate triangle center
        triangle_center_x = sum(triangle_coords[::2]) // 3
        triangle_center_y = sum(triangle_coords[1::2]) // 3

        # Draw the exclamation mark
        exclamation_width, exclamation_height, exclamation_radius = 5, 30, 5
        self.canvas.create_rectangle(triangle_center_x - exclamation_width // 2, triangle_center_y - exclamation_height,
                                     triangle_center_x + exclamation_width // 2, triangle_center_y, fill="black")
        self.canvas.create_oval(triangle_center_x - exclamation_radius, triangle_center_y + 7,
                                triangle_center_x + exclamation_radius, triangle_center_y + 7 + 2 * exclamation_radius,
                                fill="black")

        # Draw the text below the triangle
        self.canvas.create_text(self.canvas_width // 2, 25 + self.canvas_height // 2,
                                text="WARNING", fill="black", font=("Arial", 16, "bold"))

        # Redraw the triangle
        self.draw_triangle()

    def draw_flood(self):
        # House and triangle coordinates
        (triangle_x1, triangle_y1, triangle_x2, triangle_y2, triangle_x3, triangle_y3) = self.draw_triangle()
        triangle_center_x, triangle_center_y = (triangle_x1 + triangle_x2 + triangle_x3) // 3, (
                    triangle_y1 + triangle_y2 + triangle_y3) // 3
        house_size, door_height, door_width = 20, 8, 4
        house_top_left_x, house_top_left_y, house_bottom_right_x, house_bottom_right_y = triangle_center_x - house_size // 2, triangle_center_y - house_size // 2 - 6, triangle_center_x + house_size // 2, triangle_center_y + house_size // 2 - 6
        door_top_left_x, door_top_left_y, door_bottom_right_x, door_bottom_right_y = triangle_center_x - door_width // 2, triangle_center_y - door_height // 2, triangle_center_x + door_width // 2, triangle_center_y + door_height // 2
        roof_x1, roof_y1, roof_x2, roof_y2, roof_x3, roof_y3 = house_top_left_x - 5, house_top_left_y, house_bottom_right_x + 5, house_top_left_y, triangle_center_x, house_top_left_y - 12

        # Wave coordinates
        wave_amplitude, num_segments = 3, 10
        wave_start_x, wave_end_x = house_top_left_x - 26, house_bottom_right_x + 26
        segment_length = (wave_end_x - wave_start_x) / num_segments

        for i in range(num_segments):
            x1 = wave_start_x + i * segment_length
            x2, y2 = x1 + segment_length / 2, house_bottom_right_y + (wave_amplitude * (-1) ** i)
            x3 = x2 + segment_length / 2
            for y in [6, 13]:
                self.canvas.create_line(x1, house_bottom_right_y + y, x2, y2 + y, fill='black', width=3)
                self.canvas.create_line(x2, y2 + y, x3, house_bottom_right_y + y, fill='black', width=3)

        # Draw the house
        for coords in [
            (house_top_left_x, house_top_left_y, house_bottom_right_x, house_bottom_right_y, 'black', 'black'),
            (door_top_left_x, door_top_left_y, door_bottom_right_x, door_bottom_right_y, 'white', 'white')]:
            self.canvas.create_rectangle(*coords[:4], outline=coords[4], fill=coords[5])
        self.canvas.create_polygon(roof_x1, roof_y1, roof_x2, roof_y2, roof_x3, roof_y3, outline='black', fill='black')

        # Draw the text below the triangle
        self.canvas.create_text(self.canvas_width // 2, 25 + self.canvas_height // 2, text="FLOOD", fill="black",
                                font=("Arial", 16, "bold"))

        # Redraw the triangle
        self.draw_triangle()

    def draw_typhoon(self):
        # Pass triangle coordinates
        (triangle_x1, triangle_y1, triangle_x2, triangle_y2, triangle_x3, triangle_y3) = self.draw_triangle()

        # Center of the triangle
        triangle_center_x = (triangle_x1 + triangle_x2 + triangle_x3) // 3
        triangle_center_y = (triangle_y1 + triangle_y2 + triangle_y3) // 3

        # Draw typhoon
        arc_width = 12
        self.canvas.create_arc(triangle_center_x + 15, triangle_center_y - 10, triangle_center_x,
                               triangle_center_y + 10,
                               start=0, extent=-180, style="arc", width=arc_width)
        self.canvas.create_arc(triangle_center_x - 15, triangle_center_y - 15, triangle_center_x + 10,
                               triangle_center_y,
                               start=90, extent=-180, style="arc", width=arc_width)
        self.canvas.create_arc(triangle_center_x - 15, triangle_center_y + 10, triangle_center_x,
                               triangle_center_y - 10,
                               start=180, extent=-180, style="arc", width=arc_width)
        self.canvas.create_arc(triangle_center_x + 15, triangle_center_y + 15, triangle_center_x - 10,
                               triangle_center_y,
                               start=270, extent=-180, style="arc", width=arc_width)

        # Draw the text below the triangle
        self.canvas.create_text(self.canvas_width // 2, 25 + self.canvas_height // 2, text="TYPHOON", fill="black",
                                font=("Arial", 16, "bold"))

        # Redraw the triangle
        self.draw_triangle()

    def draw_heatwave(self):
        # Get triangle coordinates
        triangle_coords = self.draw_triangle()
        triangle_center_x = sum(triangle_coords[::2]) // 3
        triangle_center_y = sum(triangle_coords[1::2]) // 3

        # Draw sun
        sun_radius = 13
        for i in range(0, 360, 45):
            angle_rad = math.radians(i)
            sun_x1 = triangle_center_x + sun_radius * math.cos(angle_rad)
            sun_y1 = triangle_center_y + sun_radius * math.sin(angle_rad)
            sun_x2 = triangle_center_x + (sun_radius + 5) * math.cos(angle_rad)
            sun_y2 = triangle_center_y + (sun_radius + 5) * math.sin(angle_rad)
            self.canvas.create_line(sun_x1, sun_y1, sun_x2, sun_y2, fill="black", width=5)
        self.canvas.create_oval(triangle_center_x - sun_radius, triangle_center_y - sun_radius,
                                triangle_center_x + sun_radius, triangle_center_y + sun_radius, fill="black")

        # Draw waves
        wave_amplitude, num_segments = 3, 8
        segment_length = 36 / num_segments
        for i in range(num_segments):
            wave_x1 = triangle_center_x - 18 + i * segment_length
            wave_x2, wave_y2 = wave_x1 + segment_length / 2, triangle_center_y + (wave_amplitude * (-1) ** i)
            wave_x3 = wave_x2 + segment_length / 2
            for wave_offset in (-6, 4, 14):
                self.canvas.create_line(wave_x1, triangle_center_y + wave_offset, wave_x2, wave_y2 + wave_offset,
                                        fill='red', width=2)
                self.canvas.create_line(wave_x2, wave_y2 + wave_offset, wave_x3, triangle_center_y + wave_offset,
                                        fill='red', width=2)

        # Draw text
        self.canvas.create_text(self.canvas_width // 2, 25 + self.canvas_height // 2, text="HEATWAVE",
                                fill="black", font=("Arial", 16, "bold"))

        # Redraw triangle
        self.draw_triangle()

    def draw_disease(self):
        # Pass triangle coordinates
        (triangle_x1, triangle_y1, triangle_x2, triangle_y2, triangle_x3, triangle_y3) = self.draw_triangle()

        # Function to draw disease and lines
        def draw_disease_at(center_x, center_y, radius, line_length, line_width):
            for i in range(8):
                angle = math.radians(i * 45)
                start_x = center_x + radius * math.cos(angle)
                start_y = center_y + radius * math.sin(angle)
                end_x = center_x + (radius + line_length) * math.cos(angle)
                end_y = center_y + (radius + line_length) * math.sin(angle)
                self.canvas.create_line(start_x, start_y, end_x, end_y, fill="black", width=line_width)
            self.canvas.create_oval(center_x - radius, center_y - radius, center_x + radius, center_y + radius,
                                    fill="black", outline="black")

        # Draw diseases at different positions
        draw_disease_at(triangle_x1 - 10, (triangle_y1 + triangle_y2 + triangle_y3) // 3 + 7, 9, 4, 3)
        draw_disease_at((triangle_x1 + triangle_x2 + triangle_x3) // 3 + 3, triangle_y1 + 35, 6, 3, 2)
        draw_disease_at(triangle_x1 + 13, (triangle_y1 + triangle_y2 + triangle_y3) // 3 + 5, 4, 3, 2)

        # Draw the text below the triangle
        self.canvas.create_text(self.canvas_width // 2, 25 + self.canvas_height // 2, text="OUTBREAK", fill="black",
                                font=("Arial", 16, "bold"))

        # Redraw the triangle
        self.draw_triangle()

    def draw_drought(self):
        # Get triangle coordinates
        triangle_coords = self.draw_triangle()
        triangle_center_x = sum(triangle_coords[::2]) // 3
        triangle_center_y = sum(triangle_coords[1::2]) // 3

        # Droplet coordinates
        droplet_x1 = triangle_center_x - 12
        droplet_y1 = triangle_center_y + 5
        droplet_x2 = triangle_center_x + 12
        droplet_y2 = triangle_center_y + 5
        droplet_x3 = triangle_center_x
        droplet_y3 = triangle_center_y - 15

        # Draw the droplet
        self.canvas.create_arc(triangle_center_x - 10, triangle_center_y - 5, triangle_center_x + 10,
                               triangle_center_y + 15,
                               start=180, extent=180, style='pieslice', fill="black")
        self.canvas.create_polygon(droplet_x1, droplet_y1, droplet_x2, droplet_y2, droplet_x3, droplet_y3, fill='black')

        # Draw the cross
        cross_length = 14
        self.canvas.create_line(triangle_center_x - cross_length, triangle_center_y - cross_length,
                                triangle_center_x + cross_length, triangle_center_y + cross_length, fill="red", width=4)
        self.canvas.create_line(triangle_center_x - cross_length, triangle_center_y + cross_length,
                                triangle_center_x + cross_length, triangle_center_y - cross_length, fill="red", width=4)

        # Draw the text below the triangle
        self.canvas.create_text(self.canvas_width // 2, 25 + self.canvas_height // 2, text="DROUGHT", fill="black",
                                font=("Arial", 16, "bold"))

        # Redraw the triangle
        self.draw_triangle()

if __name__ == "__main__":
    # Initialises the alert systems
    alert_system = AlertSystem()

    # Create a simulated screen for the dummy paper display
    display = EPaperDisplayDummy()

    # Creates the receiving sockets class and assign the alert handler
    receiver = AlertReceiver()
    receiver.set_alert_handler(alert_system)

    # Attaches the receiver to the alert system
    alert_system.attach_receiver(receiver)

    # Attaches the display to the alert system
    alert_system.attach_display(display)

    # start the receiver thread and show the screen
    threading.Thread(target=receiver.listen, daemon=True).start()
    display.draw_warning()
    display.run()
